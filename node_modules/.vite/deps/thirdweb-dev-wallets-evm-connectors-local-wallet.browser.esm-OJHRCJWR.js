import "./chunk-QDANQV2N.js";
import {
  Connector
} from "./chunk-WPIQUFSE.js";
import {
  normalizeChainId
} from "./chunk-FG2CDSPQ.js";
import {
  _defineProperty
} from "./chunk-34YZJOIR.js";
import "./chunk-WWY7S4YD.js";
import "./chunk-ZWJPBMWK.js";
import "./chunk-MVFD7GKI.js";
import "./chunk-NCXSBGTZ.js";
import "./chunk-LV2OLSNB.js";
import "./chunk-YKINONDA.js";
import "./chunk-AOWXXJZS.js";
import "./chunk-WJWHIFWS.js";
import "./chunk-C6GUBMI3.js";
import "./chunk-MEVR5ISQ.js";
import "./chunk-36AA74HP.js";
import "./chunk-TRL57KBW.js";
import "./chunk-QRXYB5TD.js";
import "./chunk-42HF4JSU.js";
import "./chunk-6I4IKEVR.js";
import "./chunk-FNSYAR6H.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-AH5C5NPR.js";
import "./chunk-EZ4JTQAA.js";
import "./chunk-XZJ3BFHI.js";
import "./chunk-5GZCKJGJ.js";
import "./chunk-YVEJNCED.js";
import "./chunk-RFADWPZZ.js";
import "./chunk-A2RWTQZK.js";
import "./chunk-XOMRPNEO.js";
import "./chunk-EM4EVOCV.js";
import "./chunk-MSL6C7KH.js";
import "./chunk-INNGOKHZ.js";
import "./chunk-X3ZZGG4Y.js";
import "./chunk-WWBE5DR6.js";
import "./chunk-PTGE7AVJ.js";
import "./chunk-NSRWCEJA.js";
import "./chunk-ZEN2VC7A.js";
import "./chunk-4QRSEP2P.js";
import "./chunk-WNIDDACK.js";
import "./chunk-Z6DOZ5AQ.js";
import "./chunk-HSXVVCEX.js";
import "./chunk-V7M6JPJ6.js";
import "./chunk-7HJ6JPFW.js";
import "./chunk-PASG556O.js";
import "./chunk-M37DOL7Y.js";
import "./chunk-2GJHCM2W.js";
import "./chunk-GD25Q2LW.js";
import "./chunk-VQGHGDFI.js";
import {
  getChainProvider,
  getDefaultGasOverrides
} from "./chunk-IEERL7KR.js";
import {
  require_utils
} from "./chunk-OFYAKLRP.js";
import "./chunk-2GO4LQYH.js";
import "./chunk-G4MCGBPR.js";
import "./chunk-FN5EYCZK.js";
import {
  init_lib7 as init_lib
} from "./chunk-6F3W3FP6.js";
import {
  Signer
} from "./chunk-ZNZUQJHA.js";
import "./chunk-LRNGUABD.js";
import "./chunk-DUR6YZYN.js";
import "./chunk-NUWOKTHW.js";
import "./chunk-N735XVS2.js";
import "./chunk-NDDS3XQE.js";
import "./chunk-I2GNSU5T.js";
import "./chunk-LRN3HBSZ.js";
import "./chunk-Z5K4GTBT.js";
import "./chunk-TIZKSPBX.js";
import "./chunk-4HQ6F7ND.js";
import "./chunk-ULOLDUZC.js";
import "./chunk-4QUVL3P2.js";
import "./chunk-6UD5AQSU.js";
import "./chunk-KFTHUFKI.js";
import "./chunk-S2RS4OC4.js";
import {
  __toESM
} from "./chunk-2E63JINA.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js
init_lib();
var import_utils = __toESM(require_utils());
var WrappedSigner = class _WrappedSigner extends Signer {
  constructor(signer) {
    super();
    this.signer = signer;
    (0, import_utils.defineReadOnly)(this, "provider", signer.provider);
  }
  async getAddress() {
    return await this.signer.getAddress();
  }
  async signMessage(message) {
    return await this.signer.signMessage(message);
  }
  async signTransaction(transaction) {
    return await this.signer.signTransaction(transaction);
  }
  connect(provider) {
    return new _WrappedSigner(this.signer.connect(provider));
  }
  _signTypedData(domain, types, value) {
    return this.signer._signTypedData(domain, types, value);
  }
  async sendTransaction(transaction) {
    if (!this.provider) {
      throw new Error("Provider not found");
    }
    const gas = await getDefaultGasOverrides(this.provider);
    const txWithGas = {
      ...gas,
      ...transaction
    };
    return await this.signer.sendTransaction(txWithGas);
  }
};
var LocalWalletConnector = class extends Connector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "local_wallet");
    _defineProperty(this, "name", "Local Wallet");
    _defineProperty(this, "shimDisconnectKey", "localWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
  }
  async connect(args) {
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async disconnect() {
    this._provider = void 0;
    this._signer = void 0;
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!this._provider) {
      this._provider = getChainProvider(this.options.chain, {
        clientId: this.options.clientId,
        secretKey: this.options.secretKey
      });
    }
    return this._provider;
  }
  async getSigner() {
    if (!this._signer) {
      const provider = await this.getProvider();
      this._signer = getSignerFromEthersWallet(this.options.ethersWallet, provider);
    }
    return this._signer;
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error(`Chain not found for chainId ${chainId}, please add it to the chains property when creating this wallet`);
    }
    this._provider = getChainProvider(chain, {
      clientId: this.options.clientId,
      secretKey: this.options.secretKey
    });
    this._signer = getSignerFromEthersWallet(this.options.ethersWallet, this._provider);
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
function getSignerFromEthersWallet(ethersWallet, provider) {
  let signer = ethersWallet;
  if (provider) {
    signer = ethersWallet.connect(provider);
  }
  return new WrappedSigner(signer);
}
export {
  LocalWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm-OJHRCJWR.js.map
